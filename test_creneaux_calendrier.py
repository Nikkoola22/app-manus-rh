#!/usr/bin/env python3
"""
Script de test pour v√©rifier la fonctionnalit√© des cr√©neaux matin/apr√®s-midi
"""

import requests
import json
from datetime import datetime, date, timedelta

def test_creneaux_calendrier():
    """Teste la fonctionnalit√© des cr√©neaux matin/apr√®s-midi"""
    
    base_url = "http://localhost:5001/api"
    
    print("üß™ Test des cr√©neaux matin/apr√®s-midi dans le calendrier")
    print("=" * 70)
    
    # Test 1 : Connexion en tant que responsable
    print("\n1Ô∏è‚É£ Connexion en tant que responsable...")
    login_data = {
        "email": "marie.dubois@exemple.com",
        "password": "resp123"
    }
    
    try:
        response = requests.post(f"{base_url}/auth/login", json=login_data)
        if response.status_code == 200:
            print("‚úÖ Connexion responsable r√©ussie")
            session_cookies = response.cookies
        else:
            print(f"‚ùå √âchec de la connexion responsable : {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur. Assurez-vous que l'application est d√©marr√©e.")
        return False
    
    # Test 2 : R√©cup√©rer les agents du service
    print("\n2Ô∏è‚É£ R√©cup√©ration des agents du service...")
    try:
        response = requests.get(f"{base_url}/agents", cookies=session_cookies)
        if response.status_code == 200:
            agents = response.json()
            agents_service = [agent for agent in agents if agent.get('role') == 'Agent']
            print(f"‚úÖ {len(agents_service)} agents r√©cup√©r√©s")
            
            if not agents_service:
                print("‚ö†Ô∏è Aucun agent trouv√© pour les tests")
                return False
                
            test_agent = agents_service[0]
            print(f"   Agent de test : {test_agent['prenom']} {test_agent['nom']}")
        else:
            print(f"‚ùå √âchec de r√©cup√©ration des agents : {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des agents : {e}")
        return False
    
    # Test 3 : Cr√©er une pr√©sence le matin
    print("\n3Ô∏è‚É£ Cr√©ation d'une pr√©sence le matin...")
    today = date.today()
    
    presence_matin_data = {
        'agent_id': test_agent['id'],
        'date_presence': today.isoformat(),
        'creneau': 'matin',
        'statut': 'present',
        'motif': 'Test cr√©neau matin',
        'heure_debut': '08:00',
        'heure_fin': '12:00'
    }
    
    try:
        response = requests.post(f"{base_url}/presence", 
                               json=presence_matin_data, 
                               cookies=session_cookies)
        
        if response.status_code == 201:
            presence_matin = response.json()
            print("‚úÖ Pr√©sence matin cr√©√©e avec succ√®s")
            print(f"   ID : {presence_matin['id']}")
            print(f"   Cr√©neau : {presence_matin['creneau']}")
            print(f"   Statut : {presence_matin['statut']}")
        else:
            print(f"‚ùå √âchec de cr√©ation pr√©sence matin : {response.status_code}")
            print(f"   R√©ponse : {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation pr√©sence matin : {e}")
        return False
    
    # Test 4 : Cr√©er une pr√©sence l'apr√®s-midi
    print("\n4Ô∏è‚É£ Cr√©ation d'une pr√©sence l'apr√®s-midi...")
    
    presence_apres_midi_data = {
        'agent_id': test_agent['id'],
        'date_presence': today.isoformat(),
        'creneau': 'apres_midi',
        'statut': 'absent',
        'motif': 'Test cr√©neau apr√®s-midi - RDV m√©dical'
    }
    
    try:
        response = requests.post(f"{base_url}/presence", 
                               json=presence_apres_midi_data, 
                               cookies=session_cookies)
        
        if response.status_code == 201:
            presence_apres_midi = response.json()
            print("‚úÖ Pr√©sence apr√®s-midi cr√©√©e avec succ√®s")
            print(f"   ID : {presence_apres_midi['id']}")
            print(f"   Cr√©neau : {presence_apres_midi['creneau']}")
            print(f"   Statut : {presence_apres_midi['statut']}")
        else:
            print(f"‚ùå √âchec de cr√©ation pr√©sence apr√®s-midi : {response.status_code}")
            print(f"   R√©ponse : {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation pr√©sence apr√®s-midi : {e}")
        return False
    
    # Test 5 : V√©rifier dans le calendrier
    print("\n5Ô∏è‚É£ V√©rification dans le calendrier...")
    
    # Calculer la semaine courante
    semaine = get_semaine_iso(today)
    print(f"   Semaine de test : {semaine}")
    
    try:
        response = requests.get(f"{base_url}/presence/calendrier/semaine/{semaine}", 
                              cookies=session_cookies)
        
        if response.status_code == 200:
            calendrier = response.json()
            print("‚úÖ Calendrier r√©cup√©r√© avec succ√®s")
            
            # Chercher l'agent dans le calendrier
            agent_calendrier = None
            for agent in calendrier['agents']:
                if agent['id'] == test_agent['id']:
                    agent_calendrier = agent
                    break
            
            if agent_calendrier:
                print(f"‚úÖ Agent trouv√© dans le calendrier : {agent_calendrier['nom']}")
                
                # V√©rifier les cr√©neaux pour aujourd'hui
                jour_data = agent_calendrier['jours'].get(today.isoformat())
                if jour_data:
                    print(f"   Jour {today.isoformat()} trouv√©")
                    
                    # V√©rifier le cr√©neau matin
                    if jour_data.get('matin') and jour_data['matin'].get('presence'):
                        presence_matin_cal = jour_data['matin']['presence']
                        print(f"   ‚úÖ Cr√©neau matin : {presence_matin_cal['statut']} ({presence_matin_cal['creneau']})")
                    else:
                        print("   ‚ùå Cr√©neau matin non trouv√©")
                    
                    # V√©rifier le cr√©neau apr√®s-midi
                    if jour_data.get('apres_midi') and jour_data['apres_midi'].get('presence'):
                        presence_apres_midi_cal = jour_data['apres_midi']['presence']
                        print(f"   ‚úÖ Cr√©neau apr√®s-midi : {presence_apres_midi_cal['statut']} ({presence_apres_midi_cal['creneau']})")
                    else:
                        print("   ‚ùå Cr√©neau apr√®s-midi non trouv√©")
                else:
                    print("‚ùå Jour non trouv√© dans le calendrier")
            else:
                print("‚ùå Agent non trouv√© dans le calendrier")
        else:
            print(f"‚ùå √âchec de r√©cup√©ration du calendrier : {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du calendrier : {e}")
    
    # Test 6 : Cr√©er une pr√©sence journ√©e compl√®te
    print("\n6Ô∏è‚É£ Cr√©ation d'une pr√©sence journ√©e compl√®te...")
    
    demain = today + timedelta(days=1)
    presence_journee_data = {
        'agent_id': test_agent['id'],
        'date_presence': demain.isoformat(),
        'creneau': 'journee',
        'statut': 'conges',
        'motif': 'Test journ√©e compl√®te - cong√©s'
    }
    
    try:
        response = requests.post(f"{base_url}/presence", 
                               json=presence_journee_data, 
                               cookies=session_cookies)
        
        if response.status_code == 201:
            presence_journee = response.json()
            print("‚úÖ Pr√©sence journ√©e compl√®te cr√©√©e avec succ√®s")
            print(f"   ID : {presence_journee['id']}")
            print(f"   Cr√©neau : {presence_journee['creneau']}")
            print(f"   Statut : {presence_journee['statut']}")
        else:
            print(f"‚ùå √âchec de cr√©ation pr√©sence journ√©e : {response.status_code}")
            print(f"   R√©ponse : {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation pr√©sence journ√©e : {e}")
    
    # Test 7 : Test de contrainte unique (m√™me agent, m√™me date, m√™me cr√©neau)
    print("\n7Ô∏è‚É£ Test de contrainte unique...")
    
    presence_doublon_data = {
        'agent_id': test_agent['id'],
        'date_presence': today.isoformat(),
        'creneau': 'matin',  # M√™me cr√©neau que le test 3
        'statut': 'present',
        'motif': 'Test doublon'
    }
    
    try:
        response = requests.post(f"{base_url}/presence", 
                               json=presence_doublon_data, 
                               cookies=session_cookies)
        
        if response.status_code == 400:
            print("‚úÖ Contrainte unique respect√©e : doublon refus√©")
        else:
            print(f"‚ùå Contrainte unique non respect√©e : {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test de contrainte : {e}")
    
    # Test 8 : V√©rifier les statistiques
    print("\n8Ô∏è‚É£ V√©rification des statistiques...")
    try:
        response = requests.get(f"{base_url}/presence/statistiques/semaine/{semaine}", 
                              cookies=session_cookies)
        
        if response.status_code == 200:
            stats = response.json()
            print("‚úÖ Statistiques r√©cup√©r√©es avec succ√®s")
            print(f"   Total agents : {stats['total_agents']}")
            print(f"   Pr√©sences totales : {stats['presences_totales']}")
            print(f"   Pourcentage pr√©sence : {stats['pourcentage_presence']}%")
            
            if 'present' in stats['statuts']:
                print(f"   Pr√©sences : {stats['statuts']['present']}")
            if 'absent' in stats['statuts']:
                print(f"   Absences : {stats['statuts']['absent']}")
        else:
            print(f"‚ùå √âchec de r√©cup√©ration des statistiques : {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des statistiques : {e}")
    
    # Test 9 : Modification d'une pr√©sence
    print("\n9Ô∏è‚É£ Modification d'une pr√©sence...")
    try:
        # Modifier la pr√©sence matin
        update_data = {
            'statut': 'partiel',
            'motif': 'Pr√©sence partielle modifi√©e',
            'heure_debut': '09:00',
            'heure_fin': '11:00'
        }
        
        response = requests.put(f"{base_url}/presence/{presence_matin['id']}", 
                              json=update_data, 
                              cookies=session_cookies)
        
        if response.status_code == 200:
            presence_modifiee = response.json()
            print("‚úÖ Pr√©sence modifi√©e avec succ√®s")
            print(f"   Nouveau statut : {presence_modifiee['statut']}")
            print(f"   Nouvelles heures : {presence_modifiee['heure_debut']} - {presence_modifiee['heure_fin']}")
        else:
            print(f"‚ùå √âchec de modification : {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la modification : {e}")
    
    # Test 10 : Suppression des pr√©sences de test
    print("\nüîü Nettoyage des pr√©sences de test...")
    try:
        # Supprimer la pr√©sence matin
        response = requests.delete(f"{base_url}/presence/{presence_matin['id']}", 
                                 cookies=session_cookies)
        if response.status_code == 200:
            print("‚úÖ Pr√©sence matin supprim√©e")
        
        # Supprimer la pr√©sence apr√®s-midi
        response = requests.delete(f"{base_url}/presence/{presence_apres_midi['id']}", 
                                 cookies=session_cookies)
        if response.status_code == 200:
            print("‚úÖ Pr√©sence apr√®s-midi supprim√©e")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage : {e}")
    
    print("\n" + "=" * 70)
    print("‚úÖ Tests des cr√©neaux matin/apr√®s-midi termin√©s")
    print("   Le calendrier peut maintenant g√©rer les cr√©neaux s√©par√©ment.")
    print("   Fonctionnalit√©s test√©es :")
    print("   - Cr√©ation de pr√©sences par cr√©neau")
    print("   - Affichage dans le calendrier")
    print("   - Contraintes uniques")
    print("   - Statistiques")
    print("   - Modification et suppression")
    
    return True

def get_semaine_iso(date_obj):
    """Calcule le num√©ro de semaine ISO pour une date donn√©e"""
    year, week, _ = date_obj.isocalendar()
    return f"{year}-{week:02d}"

if __name__ == "__main__":
    test_creneaux_calendrier()




