#!/usr/bin/env python3
"""
Script de build pour cr√©er une version portable de l'application RH
G√©n√®re un package complet avec toutes les d√©pendances
"""

import os
import sys
import shutil
import subprocess
import zipfile
import platform
from pathlib import Path
from datetime import datetime

class PortableBuilder:
    def __init__(self):
        self.app_dir = Path(__file__).parent.absolute()
        self.build_dir = self.app_dir / "build"
        self.portable_dir = self.build_dir / "app-manus-rh-portable"
        self.os_name = platform.system().lower()
        
    def clean_build_directory(self):
        """Nettoie le r√©pertoire de build"""
        print("üßπ Nettoyage du r√©pertoire de build...")
        if self.build_dir.exists():
            shutil.rmtree(self.build_dir)
        self.build_dir.mkdir(exist_ok=True)
        print("‚úÖ R√©pertoire de build nettoy√©")
    
    def create_portable_structure(self):
        """Cr√©e la structure du package portable"""
        print("üìÅ Cr√©ation de la structure portable...")
        
        # Cr√©er le r√©pertoire principal
        self.portable_dir.mkdir(exist_ok=True)
        
        # Cr√©er les sous-r√©pertoires n√©cessaires
        (self.portable_dir / "database").mkdir(exist_ok=True)
        (self.portable_dir / "static").mkdir(exist_ok=True)
        (self.portable_dir / "src").mkdir(exist_ok=True)
        
        print("‚úÖ Structure portable cr√©√©e")
    
    def copy_application_files(self):
        """Copie les fichiers de l'application"""
        print("üìã Copie des fichiers de l'application...")
        
        # Fichiers Python essentiels
        essential_files = [
            "main.py",
            "requirements.txt",
            "setup_portable.py",
            "init_data.py"
        ]
        
        for file in essential_files:
            src = self.app_dir / file
            if src.exists():
                shutil.copy2(src, self.portable_dir)
        
        # Copier le dossier src
        if (self.app_dir / "src").exists():
            shutil.copytree(self.app_dir / "src", self.portable_dir / "src", dirs_exist_ok=True)
        
        # Copier les fichiers de configuration
        config_files = [
            "package.json",
            "vite.config.js",
            "tailwind.config.js",
            "postcss.config.js"
        ]
        
        for file in config_files:
            src = self.app_dir / file
            if src.exists():
                shutil.copy2(src, self.portable_dir)
        
        # Copier les guides et documentation
        guide_files = [f for f in self.app_dir.glob("GUIDE_*.md")]
        for guide in guide_files:
            shutil.copy2(guide, self.portable_dir)
        
        # Copier README si il existe
        if (self.app_dir / "README.md").exists():
            shutil.copy2(self.app_dir / "README.md", self.portable_dir)
        
        print("‚úÖ Fichiers de l'application copi√©s")
    
    def create_installation_script(self):
        """Cr√©e le script d'installation automatique"""
        print("üîß Cr√©ation du script d'installation...")
        
        install_script = f'''#!/usr/bin/env python3
"""
Script d'installation automatique pour l'application RH portable
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def main():
    print("üöÄ Installation de l'application RH portable")
    print("=" * 50)
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    print(f"‚úÖ Python {{sys.version}} d√©tect√©")
    
    # V√©rifier Node.js
    try:
        result = subprocess.run(["node", "--version"], capture_output=True, text=True, check=True)
        print(f"‚úÖ Node.js {{result.stdout.strip()}} d√©tect√©")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Node.js requis mais non trouv√©")
        print("   Installez Node.js depuis https://nodejs.org")
        return False
    
    # Ex√©cuter le setup
    try:
        subprocess.run([sys.executable, "setup_portable.py"], check=True)
        print("\\nüéâ Installation termin√©e avec succ√®s!")
        print("\\nüìù Pour d√©marrer l'application:")
        if platform.system().lower() == "windows":
            print("   Double-cliquez sur start.bat")
        else:
            print("   Ex√©cutez: ./start.sh")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation: {{e}}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
'''
        
        install_path = self.portable_dir / "install.py"
        with open(install_path, 'w', encoding='utf-8') as f:
            f.write(install_script)
        
        # Rendre ex√©cutable sur Unix
        if self.os_name != "windows":
            os.chmod(install_path, 0o755)
        
        print("‚úÖ Script d'installation cr√©√©")
    
    def create_readme(self):
        """Cr√©e un README pour le package portable"""
        print("üìñ Cr√©ation du README portable...")
        
        readme_content = f'''# Application RH - Version Portable

## Description
Application de gestion des ressources humaines (cong√©s, RTT, arr√™ts maladie, pr√©sence) - Version portable.

## Pr√©requis
- Python 3.8 ou sup√©rieur
- Node.js 16 ou sup√©rieur

## Installation rapide

### Windows
1. Double-cliquez sur `install.py`
2. Attendez la fin de l'installation
3. Double-cliquez sur `start.bat`

### macOS/Linux
1. Ouvrez un terminal dans ce dossier
2. Ex√©cutez: `python3 install.py`
3. Ex√©cutez: `./start.sh`

## Installation manuelle

1. Installez Python 3.8+ depuis https://python.org
2. Installez Node.js depuis https://nodejs.org
3. Ex√©cutez: `python3 setup_portable.py`

## Utilisation

### D√©marrage
- **Windows**: Double-cliquez sur `start.bat`
- **macOS/Linux**: Ex√©cutez `./start.sh` ou `python3 launcher.py`

### Acc√®s
- Application: http://localhost:5173
- API Backend: http://localhost:5001

### Identifiants de test
- **Admin**: admin@exemple.com / admin123
- **Responsable**: jean.martin@exemple.com / resp123
- **Agent**: sofiane.bendaoud@exemple.com / agent123

## Structure du package
```
app-manus-rh-portable/
‚îú‚îÄ‚îÄ install.py          # Script d'installation automatique
‚îú‚îÄ‚îÄ setup_portable.py   # Configuration de l'environnement
‚îú‚îÄ‚îÄ launcher.py         # Lanceur de l'application
‚îú‚îÄ‚îÄ start.bat           # Script de d√©marrage Windows
‚îú‚îÄ‚îÄ start.sh            # Script de d√©marrage Unix
‚îú‚îÄ‚îÄ main.py             # Application principale
‚îú‚îÄ‚îÄ requirements.txt    # D√©pendances Python
‚îú‚îÄ‚îÄ package.json        # D√©pendances Node.js
‚îú‚îÄ‚îÄ database/           # Base de donn√©es SQLite
‚îú‚îÄ‚îÄ static/             # Fichiers statiques
‚îî‚îÄ‚îÄ src/                # Code source de l'application
```

## Fonctionnalit√©s
- ‚úÖ Gestion des agents et services
- ‚úÖ Demandes de cong√©s et RTT
- ‚úÖ Arr√™ts maladie
- ‚úÖ Gestion de la pr√©sence
- ‚úÖ Notifications email
- ‚úÖ Interface moderne et responsive
- ‚úÖ Base de donn√©es SQLite portable

## Support
Pour toute question ou probl√®me, consultez les guides dans le dossier.

## Version
G√©n√©r√©e le {datetime.now().strftime("%d/%m/%Y √† %H:%M")}
'''
        
        readme_path = self.portable_dir / "README.md"
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print("‚úÖ README portable cr√©√©")
    
    def create_launcher_scripts(self):
        """Cr√©e les scripts de lancement pour chaque OS"""
        print("üöÄ Cr√©ation des scripts de lancement...")
        
        # Launcher Python universel (d√©j√† cr√©√© par setup_portable.py)
        launcher_content = f'''#!/usr/bin/env python3
"""
Launcher portable pour l'application RH
"""

import os
import sys
import subprocess
import time
import signal
import threading
from pathlib import Path

class AppLauncher:
    def __init__(self):
        self.app_dir = Path(__file__).parent.absolute()
        self.flask_process = None
        self.vite_process = None
        self.running = True
        
    def get_python_command(self):
        """Retourne la commande Python appropri√©e"""
        if os.name == 'nt':  # Windows
            return str(self.app_dir / "venv" / "Scripts" / "python.exe")
        else:  # Unix/Linux/macOS
            return str(self.app_dir / "venv" / "bin" / "python")
    
    def get_node_command(self):
        """Retourne la commande Node.js appropri√©e"""
        return "node"
    
    def start_flask(self):
        """D√©marre le serveur Flask"""
        print("üêç D√©marrage du serveur Flask (port 5001)...")
        try:
            python_cmd = self.get_python_command()
            cmd = [python_cmd, "main.py"]
            self.flask_process = subprocess.Popen(
                cmd, 
                cwd=self.app_dir,
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE
            )
            
            # Attendre que Flask d√©marre
            for i in range(10):
                try:
                    import requests
                    response = requests.get('http://localhost:5001/api/auth/check-session', timeout=2)
                    if response.status_code == 200:
                        print("‚úÖ Serveur Flask d√©marr√© avec succ√®s")
                        return True
                except:
                    pass
                time.sleep(1)
                print(f"   Attente du d√©marrage de Flask... ({{i+1}}/10)")
            
            print("‚ùå Timeout lors du d√©marrage de Flask")
            return False
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©marrage de Flask: {{e}}")
            return False
    
    def start_vite(self):
        """D√©marre le serveur Vite"""
        print("‚ö° D√©marrage du serveur Vite (port 5173)...")
        try:
            node_cmd = self.get_node_command()
            cmd = [node_cmd, "run", "dev"]
            self.vite_process = subprocess.Popen(
                cmd,
                cwd=self.app_dir,
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE
            )
            
            # Attendre que Vite d√©marre
            for i in range(15):
                try:
                    import requests
                    response = requests.get('http://localhost:5173/', timeout=2)
                    if response.status_code == 200:
                        print("‚úÖ Serveur Vite d√©marr√© avec succ√®s")
                        return True
                except:
                    pass
                time.sleep(1)
                print(f"   Attente du d√©marrage de Vite... ({{i+1}}/15)")
            
            print("‚ùå Timeout lors du d√©marrage de Vite")
            return False
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©marrage de Vite: {{e}}")
            return False
    
    def cleanup(self):
        """Nettoie les processus"""
        print("\\nüßπ Arr√™t des serveurs...")
        self.running = False
        
        if self.flask_process:
            try:
                self.flask_process.terminate()
                print("‚úÖ Serveur Flask arr√™t√©")
            except:
                pass
        
        if self.vite_process:
            try:
                self.vite_process.terminate()
                print("‚úÖ Serveur Vite arr√™t√©")
            except:
                pass
    
    def run(self):
        """Lance l'application"""
        print("üöÄ D√©marrage de l'application RH")
        print("=" * 50)
        
        try:
            # D√©marrer Flask
            if not self.start_flask():
                print("‚ùå Impossible de d√©marrer Flask")
                return False
            
            # D√©marrer Vite
            if not self.start_vite():
                print("‚ùå Impossible de d√©marrer Vite")
                return False
            
            print("\\nüéâ Application d√©marr√©e avec succ√®s!")
            print("\\nüåê URLs d'acc√®s:")
            print("   Application: http://localhost:5173")
            print("   API Backend: http://localhost:5001")
            print("\\nüîë Identifiants de test:")
            print("   Admin: admin@exemple.com / admin123")
            print("   Responsable: jean.martin@exemple.com / resp123")
            print("   Agent: sofiane.bendaoud@exemple.com / agent123")
            print("\\nüìù Pour arr√™ter l'application: Ctrl+C")
            
            # Ouvrir l'application
            try:
                import webbrowser
                webbrowser.open('http://localhost:5173')
                print("üåê Application ouverte dans le navigateur")
            except:
                print("‚ö†Ô∏è  Impossible d'ouvrir automatiquement le navigateur")
            
            # Attendre l'interruption
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\\n\\nüõë Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            print(f"\\n‚ùå Erreur inattendue: {{e}}")
        finally:
            self.cleanup()
            print("\\nüëã Application arr√™t√©e")

if __name__ == "__main__":
    launcher = AppLauncher()
    launcher.run()
'''
        
        # √âcrire le launcher Python
        launcher_path = self.portable_dir / "launcher.py"
        with open(launcher_path, 'w', encoding='utf-8') as f:
            f.write(launcher_content)
        
        # Rendre le script ex√©cutable sur Unix
        if self.os_name != "windows":
            os.chmod(launcher_path, 0o755)
        
        # Cr√©er des scripts batch/shell selon l'OS
        if self.os_name == "windows":
            # Script batch Windows
            batch_content = '''@echo off
echo üöÄ D√©marrage de l'application RH
echo =================================
python launcher.py
pause
'''
            with open(self.portable_dir / "start.bat", 'w', encoding='utf-8') as f:
                f.write(batch_content)
        else:
            # Script shell Unix
            shell_content = '''#!/bin/bash
echo "üöÄ D√©marrage de l'application RH"
echo "================================="
python3 launcher.py
'''
            shell_path = self.portable_dir / "start.sh"
            with open(shell_path, 'w', encoding='utf-8') as f:
                f.write(shell_content)
            os.chmod(shell_path, 0o755)
        
        print("‚úÖ Scripts de lancement cr√©√©s")
    
    def create_zip_package(self):
        """Cr√©e un package ZIP portable"""
        print("üì¶ Cr√©ation du package ZIP...")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        zip_name = f"app-manus-rh-portable-{timestamp}.zip"
        zip_path = self.build_dir / zip_name
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(self.portable_dir):
                for file in files:
                    file_path = Path(root) / file
                    arc_path = file_path.relative_to(self.portable_dir)
                    zipf.write(file_path, arc_path)
        
        print(f"‚úÖ Package ZIP cr√©√©: {zip_path}")
        return zip_path
    
    def build(self):
        """Ex√©cute le build complet"""
        print("üî® Build de l'application portable")
        print("=" * 50)
        
        try:
            self.clean_build_directory()
            self.create_portable_structure()
            self.copy_application_files()
            self.create_installation_script()
            self.create_readme()
            self.create_launcher_scripts()
            
            zip_path = self.create_zip_package()
            
            print(f"\\nüéâ Build termin√© avec succ√®s!")
            print(f"üì¶ Package portable: {zip_path}")
            print(f"üìÅ Dossier portable: {self.portable_dir}")
            print("\\nüìù Instructions de distribution:")
            print("   1. Partagez le fichier ZIP")
            print("   2. L'utilisateur extrait le ZIP")
            print("   3. L'utilisateur ex√©cute install.py")
            print("   4. L'utilisateur lance l'application avec start.bat/start.sh")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du build: {e}")
            return False

if __name__ == "__main__":
    builder = PortableBuilder()
    success = builder.build()
    sys.exit(0 if success else 1)
