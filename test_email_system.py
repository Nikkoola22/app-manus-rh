#!/usr/bin/env python3
"""
Script de test pour v√©rifier le syst√®me de notifications email
"""

import requests
import json
from datetime import datetime, date, timedelta

def test_email_system():
    """Teste le syst√®me de notifications email"""
    
    base_url = "http://localhost:5001/api"
    
    print("üìß Test du syst√®me de notifications email")
    print("=" * 70)
    
    # Test 1 : Connexion en tant qu'admin
    print("\n1Ô∏è‚É£ Connexion en tant qu'admin...")
    login_data = {
        "email": "admin@exemple.com",
        "password": "admin123"
    }
    
    try:
        response = requests.post(f"{base_url}/auth/login", json=login_data)
        if response.status_code == 200:
            print("‚úÖ Connexion admin r√©ussie")
            session_cookies = response.cookies
        else:
            print(f"‚ùå √âchec de la connexion admin : {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur. Assurez-vous que l'application est d√©marr√©e.")
        return False
    
    # Test 2 : V√©rifier la configuration email
    print("\n2Ô∏è‚É£ V√©rification de la configuration email...")
    try:
        response = requests.get(f"{base_url}/email/config", cookies=session_cookies)
        if response.status_code == 200:
            config = response.json()
            print("‚úÖ Configuration email r√©cup√©r√©e")
            print(f"   Serveur SMTP : {config['mail_server']}")
            print(f"   Port : {config['mail_port']}")
            print(f"   TLS : {config['mail_use_tls']}")
            print(f"   SSL : {config['mail_use_ssl']}")
            print(f"   Exp√©diteur : {config['mail_default_sender']}")
            print(f"   Configur√© : {config['configured']}")
            
            if not config['configured']:
                print("‚ö†Ô∏è Configuration email incompl√®te. Les emails ne seront pas envoy√©s.")
                print("   Configurez MAIL_USERNAME et MAIL_PASSWORD dans les variables d'environnement.")
        else:
            print(f"‚ùå √âchec de r√©cup√©ration de la configuration : {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la configuration : {e}")
    
    # Test 3 : Test d'envoi d'email (si configur√©)
    print("\n3Ô∏è‚É£ Test d'envoi d'email...")
    test_email = input("Entrez une adresse email pour le test (ou appuyez sur Entr√©e pour ignorer) : ").strip()
    
    if test_email:
        try:
            test_data = {"email": test_email}
            response = requests.post(f"{base_url}/email/test", 
                                   json=test_data, 
                                   cookies=session_cookies)
            
            if response.status_code == 200:
                print("‚úÖ Email de test envoy√© avec succ√®s")
                print(f"   V√©rifiez votre bo√Æte email : {test_email}")
            else:
                print(f"‚ùå √âchec de l'envoi de l'email de test : {response.status_code}")
                print(f"   R√©ponse : {response.text}")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi de l'email de test : {e}")
    else:
        print("‚è≠Ô∏è Test d'email ignor√©")
    
    # Test 4 : Connexion en tant qu'agent pour cr√©er une demande
    print("\n4Ô∏è‚É£ Test de cr√©ation de demande avec notification...")
    agent_login_data = {
        "email": "jean.martin@exemple.com",
        "password": "agent123"
    }
    
    try:
        response = requests.post(f"{base_url}/auth/login", json=agent_login_data)
        if response.status_code == 200:
            print("‚úÖ Connexion agent r√©ussie")
            agent_session = response.cookies
        else:
            print(f"‚ùå √âchec de la connexion agent : {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la connexion agent : {e}")
        return False
    
    # Test 5 : Cr√©er une demande de cong√©
    print("\n5Ô∏è‚É£ Cr√©ation d'une demande de cong√©...")
    today = date.today()
    date_debut = today + timedelta(days=7)  # Dans une semaine
    date_fin = date_debut + timedelta(days=2)  # 3 jours
    
    demande_data = {
        'type_absence': 'CA',
        'date_debut': date_debut.isoformat(),
        'date_fin': date_fin.isoformat(),
        'motif': 'Test de notification email - cong√©s'
    }
    
    try:
        response = requests.post(f"{base_url}/demandes", 
                               json=demande_data, 
                               cookies=agent_session)
        
        if response.status_code == 201:
            demande = response.json()
            demande_id = demande['id']
            print("‚úÖ Demande de cong√© cr√©√©e avec succ√®s")
            print(f"   ID : {demande_id}")
            print(f"   P√©riode : {date_debut} - {date_fin}")
            print("   üìß Email de notification envoy√© au responsable")
        else:
            print(f"‚ùå √âchec de cr√©ation de la demande : {response.status_code}")
            print(f"   R√©ponse : {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la demande : {e}")
        return False
    
    # Test 6 : Connexion en tant que responsable pour valider
    print("\n6Ô∏è‚É£ Test de validation avec notification...")
    responsable_login_data = {
        "email": "marie.dubois@exemple.com",
        "password": "resp123"
    }
    
    try:
        response = requests.post(f"{base_url}/auth/login", json=responsable_login_data)
        if response.status_code == 200:
            print("‚úÖ Connexion responsable r√©ussie")
            responsable_session = response.cookies
        else:
            print(f"‚ùå √âchec de la connexion responsable : {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la connexion responsable : {e}")
        return False
    
    # Test 7 : Valider la demande
    print("\n7Ô∏è‚É£ Validation de la demande...")
    validation_data = {
        'action': 'approuver',
        'commentaires': 'Test de validation avec notification email'
    }
    
    try:
        response = requests.post(f"{base_url}/demandes/{demande_id}/valider", 
                               json=validation_data, 
                               cookies=responsable_session)
        
        if response.status_code == 200:
            demande_validee = response.json()
            print("‚úÖ Demande valid√©e avec succ√®s")
            print(f"   Statut : {demande_validee['statut']}")
            print("   üìß Email de notification envoy√© √† l'agent")
        else:
            print(f"‚ùå √âchec de validation : {response.status_code}")
            print(f"   R√©ponse : {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la validation : {e}")
    
    # Test 8 : Test de refus avec notification
    print("\n8Ô∏è‚É£ Test de refus avec notification...")
    
    # Cr√©er une nouvelle demande
    demande_refus_data = {
        'type_absence': 'RTT',
        'date_debut': (today + timedelta(days=14)).isoformat(),
        'date_fin': (today + timedelta(days=14)).isoformat(),
        'motif': 'Test de refus avec notification email'
    }
    
    try:
        response = requests.post(f"{base_url}/demandes", 
                               json=demande_refus_data, 
                               cookies=agent_session)
        
        if response.status_code == 201:
            demande_refus = response.json()
            demande_refus_id = demande_refus['id']
            print("‚úÖ Demande de refus cr√©√©e")
            
            # Refuser la demande
            refus_data = {
                'action': 'refuser',
                'commentaires': 'Test de refus avec notification email - p√©riode trop charg√©e'
            }
            
            response = requests.post(f"{base_url}/demandes/{demande_refus_id}/valider", 
                                   json=refus_data, 
                                   cookies=responsable_session)
            
            if response.status_code == 200:
                print("‚úÖ Demande refus√©e avec succ√®s")
                print("   üìß Email de notification envoy√© √† l'agent")
            else:
                print(f"‚ùå √âchec de refus : {response.status_code}")
        else:
            print(f"‚ùå √âchec de cr√©ation de la demande de refus : {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test de refus : {e}")
    
    print("\n" + "=" * 70)
    print("‚úÖ Tests du syst√®me de notifications email termin√©s")
    print("   Fonctionnalit√©s test√©es :")
    print("   - Configuration email")
    print("   - Envoi d'email de test")
    print("   - Notification lors de cr√©ation de demande")
    print("   - Notification lors de validation")
    print("   - Notification lors de refus")
    print()
    print("üìß V√©rifiez les bo√Ætes email pour confirmer la r√©ception des notifications")
    
    return True

if __name__ == "__main__":
    test_email_system()

