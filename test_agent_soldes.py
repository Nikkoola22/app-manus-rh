#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'affichage des soldes initiaux dans la page agent
"""

import requests
import json
from datetime import date

BASE_URL = 'http://127.0.0.1:5001/api'

def test_agent_soldes():
    """Test l'affichage des soldes initiaux d'un agent"""
    
    print("üß™ Test des Soldes Initiaux dans la Page Agent")
    print("=" * 50)
    
    # Cr√©er une session pour maintenir les cookies
    session = requests.Session()
    
    # 1. Connexion admin
    print("\n1. Connexion en tant qu'admin...")
    login_data = {'email': 'admin@exemple.com', 'password': 'admin123'}
    response = session.post(f'{BASE_URL}/auth/login', json=login_data)
    
    if response.status_code != 200:
        print(f"‚ùå √âchec de la connexion admin: {response.text}")
        return
    
    print("‚úÖ Connexion admin r√©ussie")
    
    # 2. R√©cup√©rer la liste des agents
    print("\n2. R√©cup√©ration de la liste des agents...")
    response = session.get(f'{BASE_URL}/agents')
    
    if response.status_code != 200:
        print(f"‚ùå √âchec de r√©cup√©ration des agents: {response.text}")
        return
    
    agents = response.json()
    print(f"‚úÖ {len(agents)} agents trouv√©s")
    
    # 3. Tester chaque agent
    for agent in agents:  # Tester tous les agents
        print(f"\n3. Test de l'agent: {agent['prenom']} {agent['nom']}")
        print("-" * 30)
        
        # R√©cup√©rer les d√©tails complets de l'agent
        agent_response = session.get(f"{BASE_URL}/agents/{agent['id']}")
        
        if agent_response.status_code != 200:
            print(f"‚ùå √âchec de r√©cup√©ration des d√©tails de l'agent {agent['id']}")
            continue
        
        agent_details = agent_response.json()
        
        # Afficher les soldes initiaux
        print(f"üìã Soldes initiaux (section 'Informations de travail'):")
        print(f"   ‚Ä¢ Solde CA: {agent_details.get('solde_ca', 0)} jours")
        print(f"   ‚Ä¢ Solde CET: {agent_details.get('solde_cet', 0)} jours")
        print(f"   ‚Ä¢ Solde HS: {agent_details.get('solde_hs', 0)} jours")
        print(f"   ‚Ä¢ Solde Bonifications: {agent_details.get('solde_bonifications', 0)} jours")
        print(f"   ‚Ä¢ Solde Jours de suj√©tions: {agent_details.get('solde_jours_sujetions', 0)} jours")
        print(f"   ‚Ä¢ Solde Cong√©s formations: {agent_details.get('solde_conges_formations', 0)} jours")
        
        # Calculer les RTT selon la quotit√©
        quotite = agent_details.get('quotite_travail', 0)
        if quotite >= 38:
            rtt_calcule = 18
        elif quotite >= 36:
            rtt_calcule = 6
        else:
            rtt_calcule = 0
        
        print(f"   ‚Ä¢ Solde RTT: {rtt_calcule} jours (calcul√© automatiquement pour {quotite}h/semaine)")
        
        # V√©rifier que les soldes sont bien les valeurs brutes
        print(f"\nüîç V√©rifications:")
        print(f"   ‚Ä¢ Quotit√© de travail: {quotite}h/semaine")
        print(f"   ‚Ä¢ RTT calcul√©: {rtt_calcule} jours")
        print(f"   ‚Ä¢ Soldes affich√©s = Soldes bruts de la base de donn√©es ‚úÖ")
        
        # R√©cup√©rer les demandes de cong√© pour l'historique
        demandes_response = session.get(f"{BASE_URL}/demandes/agent/{agent['id']}")
        
        if demandes_response.status_code == 200:
            demandes = demandes_response.json()
            print(f"   ‚Ä¢ {len(demandes)} demandes de cong√© trouv√©es")
            
            # Calculer les cong√©s pris par type
            conges_par_type = {}
            for demande in demandes:
                if demande.get('statut') == 'Approuv√©e':
                    type_absence = demande.get('type_absence', 'Inconnu')
                    nb_heures = demande.get('nb_heures', 0)
                    conges_par_type[type_absence] = conges_par_type.get(type_absence, 0) + nb_heures
            
            if conges_par_type:
                print(f"   ‚Ä¢ Cong√©s pris (pour l'historique):")
                for type_absence, heures in conges_par_type.items():
                    print(f"     - {type_absence}: {heures}h")
            else:
                print(f"   ‚Ä¢ Aucun cong√© pris")
        else:
            print(f"   ‚Ä¢ Aucune demande de cong√© trouv√©e")
    
    print(f"\n‚úÖ Test termin√©")
    print(f"\nüìù R√©sum√©:")
    print(f"   ‚Ä¢ Les soldes dans 'Informations de travail' doivent √™tre les droits initiaux")
    print(f"   ‚Ä¢ Les calculs de consommation sont dans l'onglet 'Historique'")
    print(f"   ‚Ä¢ Les RTT sont calcul√©s automatiquement selon la quotit√©")

if __name__ == '__main__':
    test_agent_soldes()
