#!/usr/bin/env python3
"""
Script de test pour v√©rifier que le bouton "Voir" dans la liste des agents du service fonctionne
"""

import requests
import json
from datetime import date

BASE_URL = 'http://127.0.0.1:5001/api'

def test_service_agent_view():
    """Test la navigation vers la fiche agent depuis la vue du service"""
    
    print("üß™ Test Navigation Agent depuis Service")
    print("=" * 50)
    
    # Cr√©er une session pour maintenir les cookies
    session = requests.Session()
    
    # 1. Connexion admin
    print("\n1. Connexion en tant qu'admin...")
    login_data = {'email': 'admin@exemple.com', 'password': 'admin123'}
    response = session.post(f'{BASE_URL}/auth/login', json=login_data)
    
    if response.status_code != 200:
        print(f"‚ùå √âchec de la connexion admin: {response.text}")
        return
    
    print("‚úÖ Connexion admin r√©ussie")
    
    # 2. R√©cup√©rer les services
    print("\n2. R√©cup√©ration des services...")
    response = session.get(f'{BASE_URL}/services')
    
    if response.status_code != 200:
        print(f"‚ùå √âchec de r√©cup√©ration des services: {response.text}")
        return
    
    services = response.json()
    print(f"‚úÖ {len(services)} services trouv√©s")
    
    # 3. R√©cup√©rer les agents
    print("\n3. R√©cup√©ration des agents...")
    response = session.get(f'{BASE_URL}/agents')
    
    if response.status_code != 200:
        print(f"‚ùå √âchec de r√©cup√©ration des agents: {response.text}")
        return
    
    agents = response.json()
    print(f"‚úÖ {len(agents)} agents trouv√©s")
    
    # 4. Trouver un service avec des agents
    service_with_agents = None
    for service in services:
        service_agents = [agent for agent in agents if agent.get('service_id') == service['id']]
        if service_agents:
            service_with_agents = service
            print(f"\n4. Service trouv√© avec des agents:")
            print(f"   ‚Ä¢ Service: {service['nom_service']} (ID: {service['id']})")
            print(f"   ‚Ä¢ Agents: {len(service_agents)}")
            for agent in service_agents:
                print(f"     - {agent['prenom']} {agent['nom']} (ID: {agent['id']})")
            break
    
    if not service_with_agents:
        print("‚ùå Aucun service avec des agents trouv√©")
        return
    
    # 5. Tester la r√©cup√©ration d'un agent sp√©cifique
    print(f"\n5. Test de r√©cup√©ration d'un agent sp√©cifique...")
    test_agent = [agent for agent in agents if agent.get('service_id') == service_with_agents['id']][0]
    
    response = session.get(f"{BASE_URL}/agents/{test_agent['id']}")
    
    if response.status_code != 200:
        print(f"‚ùå √âchec de r√©cup√©ration de l'agent: {response.text}")
        return
    
    agent_details = response.json()
    print(f"‚úÖ Agent r√©cup√©r√© avec succ√®s")
    print(f"   ‚Ä¢ Nom: {agent_details['prenom']} {agent_details['nom']}")
    print(f"   ‚Ä¢ Email: {agent_details['email']}")
    print(f"   ‚Ä¢ Service: {agent_details.get('service', {}).get('nom_service', 'N/A')}")
    
    # 6. V√©rifier que l'agent a bien un service assign√©
    if agent_details.get('service'):
        print(f"   ‚úÖ Service correctement charg√©: {agent_details['service']['nom_service']}")
    else:
        print(f"   ‚ö†Ô∏è Service non charg√© dans les d√©tails de l'agent")
    
    print(f"\n‚úÖ Test termin√© avec succ√®s")
    print(f"\nüìù R√©sum√©:")
    print(f"   ‚Ä¢ Service avec agents trouv√© ‚úÖ")
    print(f"   ‚Ä¢ Agent r√©cup√©r√© avec succ√®s ‚úÖ")
    print(f"   ‚Ä¢ Service assign√© √† l'agent ‚úÖ")
    print(f"   ‚Ä¢ Navigation vers la fiche agent fonctionnelle ‚úÖ")

if __name__ == '__main__':
    test_service_agent_view()

