#!/usr/bin/env python3
"""
Script de configuration portable pour l'application RH
D√©tecte automatiquement l'OS et configure l'environnement
"""

import os
import sys
import platform
import subprocess
import shutil
from pathlib import Path

class PortableSetup:
    def __init__(self):
        self.app_dir = Path(__file__).parent.absolute()
        self.os_name = platform.system().lower()
        self.python_cmd = self._get_python_command()
        self.node_cmd = self._get_node_command()
        
    def _get_python_command(self):
        """D√©termine la commande Python √† utiliser"""
        if self.os_name == "windows":
            return "python"
        else:
            # Essayer python3 d'abord, puis python
            for cmd in ["python3", "python"]:
                if shutil.which(cmd):
                    return cmd
            return "python"
    
    def _get_node_command(self):
        """D√©termine la commande Node.js √† utiliser"""
        if self.os_name == "windows":
            return "node"
        else:
            return "node"
    
    def check_python(self):
        """V√©rifie que Python est install√©"""
        print("üêç V√©rification de Python...")
        try:
            result = subprocess.run([self.python_cmd, "--version"], 
                                  capture_output=True, text=True, check=True)
            print(f"‚úÖ Python trouv√©: {result.stdout.strip()}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Python n'est pas install√© ou n'est pas dans le PATH")
            print("   Veuillez installer Python 3.8+ depuis https://python.org")
            return False
    
    def check_node(self):
        """V√©rifie que Node.js est install√©"""
        print("üì¶ V√©rification de Node.js...")
        try:
            result = subprocess.run([self.node_cmd, "--version"], 
                                  capture_output=True, text=True, check=True)
            print(f"‚úÖ Node.js trouv√©: {result.stdout.strip()}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Node.js n'est pas install√© ou n'est pas dans le PATH")
            print("   Veuillez installer Node.js depuis https://nodejs.org")
            return False
    
    def create_virtual_environment(self):
        """Cr√©e l'environnement virtuel Python"""
        print("üîß Cr√©ation de l'environnement virtuel...")
        venv_path = self.app_dir / "venv"
        
        if venv_path.exists():
            print("‚úÖ Environnement virtuel existant trouv√©")
            return True
        
        try:
            subprocess.run([self.python_cmd, "-m", "venv", str(venv_path)], 
                          check=True, cwd=self.app_dir)
            print("‚úÖ Environnement virtuel cr√©√©")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de la cr√©ation de l'environnement virtuel: {e}")
            return False
    
    def get_pip_command(self):
        """Retourne la commande pip appropri√©e selon l'OS"""
        if self.os_name == "windows":
            return str(self.app_dir / "venv" / "Scripts" / "pip.exe")
        else:
            return str(self.app_dir / "venv" / "bin" / "pip")
    
    def install_python_dependencies(self):
        """Installe les d√©pendances Python"""
        print("üì¶ Installation des d√©pendances Python...")
        pip_cmd = self.get_pip_command()
        
        try:
            # Mettre √† jour pip
            subprocess.run([pip_cmd, "install", "--upgrade", "pip"], 
                          check=True, cwd=self.app_dir)
            
            # Installer les d√©pendances
            subprocess.run([pip_cmd, "install", "-r", "requirements.txt"], 
                          check=True, cwd=self.app_dir)
            print("‚úÖ D√©pendances Python install√©es")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation des d√©pendances Python: {e}")
            return False
    
    def install_node_dependencies(self):
        """Installe les d√©pendances Node.js"""
        print("üì¶ Installation des d√©pendances Node.js...")
        
        try:
            subprocess.run(["npm", "install"], 
                          check=True, cwd=self.app_dir)
            print("‚úÖ D√©pendances Node.js install√©es")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation des d√©pendances Node.js: {e}")
            return False
    
    def create_database_directory(self):
        """Cr√©e le r√©pertoire de base de donn√©es"""
        print("üóÑÔ∏è Configuration de la base de donn√©es...")
        db_dir = self.app_dir / "database"
        db_dir.mkdir(exist_ok=True)
        print("‚úÖ R√©pertoire de base de donn√©es cr√©√©")
        return True
    
    def create_launcher_scripts(self):
        """Cr√©e les scripts de lancement pour chaque OS"""
        print("üöÄ Cr√©ation des scripts de lancement...")
        
        # Script Python universel
        launcher_content = f'''#!/usr/bin/env python3
"""
Launcher portable pour l'application RH
"""

import os
import sys
import subprocess
import time
import signal
import threading
from pathlib import Path

class AppLauncher:
    def __init__(self):
        self.app_dir = Path(__file__).parent.absolute()
        self.flask_process = None
        self.vite_process = None
        self.running = True
        
    def get_python_command(self):
        """Retourne la commande Python appropri√©e"""
        if os.name == 'nt':  # Windows
            return str(self.app_dir / "venv" / "Scripts" / "python.exe")
        else:  # Unix/Linux/macOS
            return str(self.app_dir / "venv" / "bin" / "python")
    
    def get_node_command(self):
        """Retourne la commande Node.js appropri√©e"""
        return "node"
    
    def start_flask(self):
        """D√©marre le serveur Flask"""
        print("üêç D√©marrage du serveur Flask (port 5001)...")
        try:
            python_cmd = self.get_python_command()
            cmd = [python_cmd, "main.py"]
            self.flask_process = subprocess.Popen(
                cmd, 
                cwd=self.app_dir,
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE
            )
            
            # Attendre que Flask d√©marre
            for i in range(10):
                try:
                    import requests
                    response = requests.get('http://localhost:5001/api/auth/check-session', timeout=2)
                    if response.status_code == 200:
                        print("‚úÖ Serveur Flask d√©marr√© avec succ√®s")
                        return True
                except:
                    pass
                time.sleep(1)
                print(f"   Attente du d√©marrage de Flask... ({{i+1}}/10)")
            
            print("‚ùå Timeout lors du d√©marrage de Flask")
            return False
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©marrage de Flask: {{e}}")
            return False
    
    def start_vite(self):
        """D√©marre le serveur Vite"""
        print("‚ö° D√©marrage du serveur Vite (port 5173)...")
        try:
            node_cmd = self.get_node_command()
            cmd = [node_cmd, "run", "dev"]
            self.vite_process = subprocess.Popen(
                cmd,
                cwd=self.app_dir,
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE
            )
            
            # Attendre que Vite d√©marre
            for i in range(15):
                try:
                    import requests
                    response = requests.get('http://localhost:5173/', timeout=2)
                    if response.status_code == 200:
                        print("‚úÖ Serveur Vite d√©marr√© avec succ√®s")
                        return True
                except:
                    pass
                time.sleep(1)
                print(f"   Attente du d√©marrage de Vite... ({{i+1}}/15)")
            
            print("‚ùå Timeout lors du d√©marrage de Vite")
            return False
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©marrage de Vite: {{e}}")
            return False
    
    def cleanup(self):
        """Nettoie les processus"""
        print("\\nüßπ Arr√™t des serveurs...")
        self.running = False
        
        if self.flask_process:
            try:
                self.flask_process.terminate()
                print("‚úÖ Serveur Flask arr√™t√©")
            except:
                pass
        
        if self.vite_process:
            try:
                self.vite_process.terminate()
                print("‚úÖ Serveur Vite arr√™t√©")
            except:
                pass
    
    def run(self):
        """Lance l'application"""
        print("üöÄ D√©marrage de l'application RH")
        print("=" * 50)
        
        try:
            # D√©marrer Flask
            if not self.start_flask():
                print("‚ùå Impossible de d√©marrer Flask")
                return False
            
            # D√©marrer Vite
            if not self.start_vite():
                print("‚ùå Impossible de d√©marrer Vite")
                return False
            
            print("\\nüéâ Application d√©marr√©e avec succ√®s!")
            print("\\nüåê URLs d'acc√®s:")
            print("   Application: http://localhost:5173")
            print("   API Backend: http://localhost:5001")
            print("\\nüîë Identifiants de test:")
            print("   Admin: admin@exemple.com / admin123")
            print("   Responsable: jean.martin@exemple.com / resp123")
            print("   Agent: sofiane.bendaoud@exemple.com / agent123")
            print("\\nüìù Pour arr√™ter l'application: Ctrl+C")
            
            # Ouvrir l'application
            try:
                import webbrowser
                webbrowser.open('http://localhost:5173')
                print("üåê Application ouverte dans le navigateur")
            except:
                print("‚ö†Ô∏è  Impossible d'ouvrir automatiquement le navigateur")
            
            # Attendre l'interruption
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\\n\\nüõë Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            print(f"\\n‚ùå Erreur inattendue: {{e}}")
        finally:
            self.cleanup()
            print("\\nüëã Application arr√™t√©e")

if __name__ == "__main__":
    launcher = AppLauncher()
    launcher.run()
'''
        
        # √âcrire le launcher Python
        launcher_path = self.app_dir / "launcher.py"
        with open(launcher_path, 'w', encoding='utf-8') as f:
            f.write(launcher_content)
        
        # Rendre le script ex√©cutable sur Unix
        if self.os_name != "windows":
            os.chmod(launcher_path, 0o755)
        
        # Cr√©er des scripts batch/shell selon l'OS
        if self.os_name == "windows":
            # Script batch Windows
            batch_content = '''@echo off
echo üöÄ D√©marrage de l'application RH
echo =================================
python launcher.py
pause
'''
            with open(self.app_dir / "start.bat", 'w', encoding='utf-8') as f:
                f.write(batch_content)
        else:
            # Script shell Unix
            shell_content = '''#!/bin/bash
echo "üöÄ D√©marrage de l'application RH"
echo "================================="
python3 launcher.py
'''
            shell_path = self.app_dir / "start.sh"
            with open(shell_path, 'w', encoding='utf-8') as f:
                f.write(shell_content)
            os.chmod(shell_path, 0o755)
        
        print("‚úÖ Scripts de lancement cr√©√©s")
        return True
    
    def initialize_database(self):
        """Initialise la base de donn√©es avec les donn√©es de base"""
        print("üóÑÔ∏è Initialisation de la base de donn√©es...")
        
        try:
            # Utiliser le Python de l'environnement virtuel
            if self.os_name == "windows":
                python_cmd = str(self.app_dir / "venv" / "Scripts" / "python.exe")
            else:
                python_cmd = str(self.app_dir / "venv" / "bin" / "python")
            
            subprocess.run([python_cmd, "init_portable_data.py"], 
                          check=True, cwd=self.app_dir)
            print("‚úÖ Base de donn√©es initialis√©e")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
            return False

    def run_setup(self):
        """Ex√©cute la configuration compl√®te"""
        print("üîß Configuration portable de l'application RH")
        print("=" * 50)
        print(f"üìÅ R√©pertoire de l'application: {self.app_dir}")
        print(f"üñ•Ô∏è  Syst√®me d'exploitation: {self.os_name}")
        print()
        
        # V√©rifications pr√©alables
        if not self.check_python():
            return False
        
        if not self.check_node():
            return False
        
        # Configuration
        if not self.create_virtual_environment():
            return False
        
        if not self.install_python_dependencies():
            return False
        
        if not self.install_node_dependencies():
            return False
        
        if not self.create_database_directory():
            return False
        
        if not self.initialize_database():
            return False
        
        if not self.create_launcher_scripts():
            return False
        
        print("\nüéâ Configuration termin√©e avec succ√®s!")
        print("\nüìù Pour d√©marrer l'application:")
        if self.os_name == "windows":
            print("   Double-cliquez sur start.bat")
            print("   ou ex√©cutez: python launcher.py")
        else:
            print("   Ex√©cutez: ./start.sh")
            print("   ou ex√©cutez: python3 launcher.py")
        
        return True

if __name__ == "__main__":
    setup = PortableSetup()
    success = setup.run_setup()
    sys.exit(0 if success else 1)
